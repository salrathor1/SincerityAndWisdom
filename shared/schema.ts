import {
  pgTable,
  text,
  varchar,
  timestamp,
  jsonb,
  index,
  serial,
  boolean,
  integer,
  pgEnum,
} from "drizzle-orm/pg-core";
import { relations } from "drizzle-orm";
import { createInsertSchema } from "drizzle-zod";
import { z } from "zod";

// User role enum
export const userRoleEnum = pgEnum('user_role', ['admin', 'arabic_transcripts_editor', 'translations_editor', 'viewer']);

// Session storage table (required for Replit Auth)
export const sessions = pgTable(
  "sessions",
  {
    sid: varchar("sid").primaryKey(),
    sess: jsonb("sess").notNull(),
    expire: timestamp("expire").notNull(),
  },
  (table) => [index("IDX_session_expire").on(table.expire)],
);

// User storage table (required for Replit Auth)
export const users = pgTable("users", {
  id: varchar("id").primaryKey().notNull(),
  email: varchar("email").unique(),
  firstName: varchar("first_name"),
  lastName: varchar("last_name"),
  profileImageUrl: varchar("profile_image_url"),
  role: userRoleEnum("role").default("viewer"),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

export const playlists = pgTable("playlists", {
  id: serial("id").primaryKey(),
  name: varchar("name", { length: 255 }).notNull(),
  description: text("description"),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

export const videos = pgTable("videos", {
  id: serial("id").primaryKey(),
  youtubeId: varchar("youtube_id", { length: 20 }).notNull().unique(),
  title: varchar("title", { length: 500 }).notNull(),
  description: text("description"),
  duration: varchar("duration", { length: 20 }),
  thumbnailUrl: varchar("thumbnail_url", { length: 500 }),
  youtubeUrl: varchar("youtube_url", { length: 500 }).notNull(),
  playlistId: integer("playlist_id").references(() => playlists.id),
  playlistOrder: integer("playlist_order").default(0), // Order within playlist
  vocabulary: text("vocabulary"), // vocabulary notes and definitions
  status: varchar("status", { length: 20 }).default("processing"), // processing, complete, error
  isPublic: boolean("is_public").default(true), // Controls visibility in landing page dropdown
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

export const transcripts = pgTable("transcripts", {
  id: serial("id").primaryKey(),
  videoId: integer("video_id").references(() => videos.id).notNull(),
  language: varchar("language", { length: 5 }).notNull(), // en, ar, es, etc.
  content: jsonb("content").notNull(), // Array of { time: string, text: string }
  draftContent: jsonb("draft_content"), // Draft version of content
  isAutoGenerated: boolean("is_auto_generated").default(false),
  approvalStatus: varchar("approval_status", { length: 20 }).default("unchecked"), // unchecked, approved
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

// Tasks table for task management
export const tasks = pgTable("tasks", {
  id: serial("id").primaryKey(),
  description: varchar("description", { length: 1000 }).notNull(),
  status: varchar("status", { length: 20 }).notNull().default("In-Progress"), // "In-Progress" or "Complete"
  assignedToUserId: varchar("assigned_to_user_id").notNull().references(() => users.id),
  taskLink: varchar("task_link", { length: 500 }), // Optional link to the task
  createdByUserId: varchar("created_by_user_id").notNull().references(() => users.id),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

// Reported issues table
export const reportedIssues = pgTable("reported_issues", {
  id: serial("id").primaryKey(),
  playlistId: integer("playlist_id").references(() => playlists.id),
  videoId: integer("video_id").references(() => videos.id),
  segmentIndex: integer("segment_index"), // Index of the segment in the transcript
  description: text("description").notNull(),
  status: varchar("status", { length: 20 }).notNull().default("Pending"), // "Pending" or "Complete"
  adminNote: text("admin_note"), // Admin can add notes when resolving
  reportedByUserId: varchar("reported_by_user_id").references(() => users.id),
  contactName: varchar("contact_name", { length: 255 }), // Optional contact name
  contactEmail: varchar("contact_email", { length: 255 }), // Optional contact email
  contactMobile: varchar("contact_mobile", { length: 50 }), // Optional contact mobile
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

// Relations
export const playlistsRelations = relations(playlists, ({ many }) => ({
  videos: many(videos),
}));

export const videosRelations = relations(videos, ({ one, many }) => ({
  playlist: one(playlists, {
    fields: [videos.playlistId],
    references: [playlists.id],
  }),
  transcripts: many(transcripts),
}));

export const transcriptsRelations = relations(transcripts, ({ one }) => ({
  video: one(videos, {
    fields: [transcripts.videoId],
    references: [videos.id],
  }),
}));

export const tasksRelations = relations(tasks, ({ one }) => ({
  assignedToUser: one(users, {
    fields: [tasks.assignedToUserId],
    references: [users.id],
    relationName: "assignedTasks",
  }),
  createdByUser: one(users, {
    fields: [tasks.createdByUserId],
    references: [users.id],
    relationName: "createdTasks",
  }),
}));

export const usersRelations = relations(users, ({ many }) => ({
  assignedTasks: many(tasks, { relationName: "assignedTasks" }),
  createdTasks: many(tasks, { relationName: "createdTasks" }),
  reportedIssues: many(reportedIssues),
}));

export const reportedIssuesRelations = relations(reportedIssues, ({ one }) => ({
  playlist: one(playlists, {
    fields: [reportedIssues.playlistId],
    references: [playlists.id],
  }),
  video: one(videos, {
    fields: [reportedIssues.videoId],
    references: [videos.id],
  }),
  reportedByUser: one(users, {
    fields: [reportedIssues.reportedByUserId],
    references: [users.id],
  }),
}));

// Insert schemas
export const insertPlaylistSchema = createInsertSchema(playlists).omit({
  id: true,
  createdAt: true,
  updatedAt: true,
});

export const insertVideoSchema = createInsertSchema(videos).omit({
  id: true,
  createdAt: true,
  updatedAt: true,
});

export const insertTranscriptSchema = createInsertSchema(transcripts).omit({
  id: true,
  createdAt: true,
  updatedAt: true,
});

export const insertTaskSchema = createInsertSchema(tasks).omit({
  id: true,
  createdAt: true,
  updatedAt: true,
}).extend({
  taskLink: z.string().optional().or(z.literal("")).transform(val => val === "" ? undefined : val),
});

export const insertReportedIssueSchema = createInsertSchema(reportedIssues).omit({
  id: true,
  createdAt: true,
  updatedAt: true,
});

// Types
export type UpsertUser = typeof users.$inferInsert;
export type User = typeof users.$inferSelect;





export type InsertPlaylist = z.infer<typeof insertPlaylistSchema>;
export type Playlist = typeof playlists.$inferSelect;
export type InsertVideo = z.infer<typeof insertVideoSchema>;
export type Video = typeof videos.$inferSelect;
export type InsertTranscript = z.infer<typeof insertTranscriptSchema>;
export type Transcript = typeof transcripts.$inferSelect;
export type InsertTask = z.infer<typeof insertTaskSchema>;
export type Task = typeof tasks.$inferSelect;
export type InsertReportedIssue = z.infer<typeof insertReportedIssueSchema>;
export type ReportedIssue = typeof reportedIssues.$inferSelect;

// Extended types for API responses
export type VideoWithRelations = Video & {
  playlist?: Playlist | null;
  transcripts?: Transcript[];
};

export type PlaylistWithVideos = Playlist & {
  videos?: Video[];
};

// Extended types for tasks with user information
export type TaskWithUsers = Task & {
  assignedToUser?: User;
  createdByUser?: User;
};

export type ReportedIssueWithRelations = ReportedIssue & {
  playlist?: Playlist | null;
  video?: VideoWithRelations | null;
  reportedByUser?: User | null;
};
